#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/

require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
let onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

/*
* Added CORS so that no one outside the specified origin could access our socket
* */

const io = require("socket.io")(server, {
  cors: {
    origin: process.env.CLIENT_ORIGIN,
    methods: ["GET", "POST"],
    credentials: true
  }
});

io.on("connect", (socket) => {

  /*
  * Go online - Send list of previous online users to the newly connected user
  * Check if user is not already online - in case client just refreshes the page
  * Updates user status to online
  * Tell other users that this user is now online
  * */

  socket.on("go-online", (id) => {
    socket.emit("add-prev-online-users", onlineUsers);
    onlineUsers = onlineUsers.filter(user => user.id !== id);
    onlineUsers.push({ id, socketId: socket.id });
    socket.broadcast.emit("add-online-user", id);
  });

  /*
  * Checks if user is online
  * Sends message to that one specific user instead of broadcasting to all users
  * */

  socket.on("new-message", (data) => {
    const user = onlineUsers.find(user => user.id === data.recipientId);
    if (user){
      socket.to(user.socketId).emit("new-message", {
        message: data.message,
        sender: data.sender,
      });
    }
  });

  /*
  * Logout - Updates user status to offline
  * Tell other users that this user is no more online
  * Sends an acknowledgement to client so client could disconnect
  * */

  socket.on('logout', (id, cb) => {
    onlineUsers = onlineUsers.filter(user => user.id !== id);
    socket.broadcast.emit("remove-offline-user", id);
    cb();
  });

  /*
  * Disconnect - It's useful if user does not logout. Instead they close browser's tab or exit in some other way
  * Checks if user is online
  * Update user's status to offline
  * Tell other users that this user is no more online
  * */

  socket.on('disconnect', () => {
    const user = onlineUsers.find(user => user.socketId === socket.id);
    if (user){
      onlineUsers = onlineUsers.filter(onlineUser => onlineUser.id === user.id);
      socket.broadcast.emit("remove-offline-user", user.id);
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
